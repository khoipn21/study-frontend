/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PaymentSuccessRouteImport } from './routes/payment-success'
import { Route as PaymentErrorRouteImport } from './routes/payment-error'
import { Route as McpRouteImport } from './routes/mcp'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ForumIndexRouteImport } from './routes/forum.index'
import { Route as FilesIndexRouteImport } from './routes/files.index'
import { Route as CoursesIndexRouteImport } from './routes/courses.index'
import { Route as ChatIndexRouteImport } from './routes/chat.index'
import { Route as MeEnrollmentsRouteImport } from './routes/me.enrollments'
import { Route as MeDashboardRouteImport } from './routes/me.dashboard'
import { Route as MeCoursesRouteImport } from './routes/me.courses'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as DemoMcpTodosRouteImport } from './routes/demo.mcp-todos'
import { Route as CoursesCourseIdRouteImport } from './routes/courses.$courseId'
import { Route as BillingTransactionsRouteImport } from './routes/billing.transactions'
import { Route as BillingSubscriptionsRouteImport } from './routes/billing.subscriptions'
import { Route as BillingMethodsRouteImport } from './routes/billing.methods'
import { Route as AuthRegisterRouteImport } from './routes/auth.register'
import { Route as AuthLoginRouteImport } from './routes/auth.login'
import { Route as ApiMcpTodosRouteImport } from './routes/api.mcp-todos'
import { Route as ApiDemoTqTodosRouteImport } from './routes/api.demo-tq-todos'
import { Route as ApiDemoNamesRouteImport } from './routes/api.demo-names'
import { Route as DashboardInstructorIndexRouteImport } from './routes/dashboard.instructor.index'
import { Route as LearnCourseIdLectureIdRouteImport } from './routes/learn.$courseId.$lectureId'
import { Route as ForumTopicsTopicIdRouteImport } from './routes/forum.topics.$topicId'
import { Route as ForumPostsPostIdRouteImport } from './routes/forum.posts.$postId'
import { Route as DemoStartServerFuncsRouteImport } from './routes/demo.start.server-funcs'
import { Route as DemoStartApiRequestRouteImport } from './routes/demo.start.api-request'
import { Route as DemoFormSimpleRouteImport } from './routes/demo.form.simple'
import { Route as DemoFormAddressRouteImport } from './routes/demo.form.address'
import { Route as DashboardInstructorUploadIndexRouteImport } from './routes/dashboard.instructor.upload.index'
import { Route as DashboardInstructorStudentsIndexRouteImport } from './routes/dashboard.instructor.students.index'
import { Route as DashboardInstructorMessagesIndexRouteImport } from './routes/dashboard.instructor.messages.index'
import { Route as DashboardInstructorCoursesIndexRouteImport } from './routes/dashboard.instructor.courses.index'
import { Route as DashboardInstructorAnalyticsIndexRouteImport } from './routes/dashboard.instructor.analytics.index'
import { Route as MeCourseCourseIdProgressRouteImport } from './routes/me.course.$courseId.progress'
import { Route as DashboardInstructorCoursesNewRouteImport } from './routes/dashboard.instructor.courses.new'
import { Route as DashboardInstructorCoursesCourseIdLecturesRouteImport } from './routes/dashboard.instructor.courses.$courseId.lectures'
import { Route as DashboardInstructorCoursesCourseIdEditRouteImport } from './routes/dashboard.instructor.courses.$courseId.edit'

const PaymentSuccessRoute = PaymentSuccessRouteImport.update({
  id: '/payment-success',
  path: '/payment-success',
  getParentRoute: () => rootRouteImport,
} as any)
const PaymentErrorRoute = PaymentErrorRouteImport.update({
  id: '/payment-error',
  path: '/payment-error',
  getParentRoute: () => rootRouteImport,
} as any)
const McpRoute = McpRouteImport.update({
  id: '/mcp',
  path: '/mcp',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ForumIndexRoute = ForumIndexRouteImport.update({
  id: '/forum/',
  path: '/forum/',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesIndexRoute = FilesIndexRouteImport.update({
  id: '/files/',
  path: '/files/',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesIndexRoute = CoursesIndexRouteImport.update({
  id: '/courses/',
  path: '/courses/',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/chat/',
  path: '/chat/',
  getParentRoute: () => rootRouteImport,
} as any)
const MeEnrollmentsRoute = MeEnrollmentsRouteImport.update({
  id: '/me/enrollments',
  path: '/me/enrollments',
  getParentRoute: () => rootRouteImport,
} as any)
const MeDashboardRoute = MeDashboardRouteImport.update({
  id: '/me/dashboard',
  path: '/me/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const MeCoursesRoute = MeCoursesRouteImport.update({
  id: '/me/courses',
  path: '/me/courses',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoMcpTodosRoute = DemoMcpTodosRouteImport.update({
  id: '/demo/mcp-todos',
  path: '/demo/mcp-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const CoursesCourseIdRoute = CoursesCourseIdRouteImport.update({
  id: '/courses/$courseId',
  path: '/courses/$courseId',
  getParentRoute: () => rootRouteImport,
} as any)
const BillingTransactionsRoute = BillingTransactionsRouteImport.update({
  id: '/billing/transactions',
  path: '/billing/transactions',
  getParentRoute: () => rootRouteImport,
} as any)
const BillingSubscriptionsRoute = BillingSubscriptionsRouteImport.update({
  id: '/billing/subscriptions',
  path: '/billing/subscriptions',
  getParentRoute: () => rootRouteImport,
} as any)
const BillingMethodsRoute = BillingMethodsRouteImport.update({
  id: '/billing/methods',
  path: '/billing/methods',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/auth/register',
  path: '/auth/register',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiMcpTodosRoute = ApiMcpTodosRouteImport.update({
  id: '/api/mcp-todos',
  path: '/api/mcp-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoTqTodosRoute = ApiDemoTqTodosRouteImport.update({
  id: '/api/demo-tq-todos',
  path: '/api/demo-tq-todos',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiDemoNamesRoute = ApiDemoNamesRouteImport.update({
  id: '/api/demo-names',
  path: '/api/demo-names',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardInstructorIndexRoute =
  DashboardInstructorIndexRouteImport.update({
    id: '/dashboard/instructor/',
    path: '/dashboard/instructor/',
    getParentRoute: () => rootRouteImport,
  } as any)
const LearnCourseIdLectureIdRoute = LearnCourseIdLectureIdRouteImport.update({
  id: '/learn/$courseId/$lectureId',
  path: '/learn/$courseId/$lectureId',
  getParentRoute: () => rootRouteImport,
} as any)
const ForumTopicsTopicIdRoute = ForumTopicsTopicIdRouteImport.update({
  id: '/forum/topics/$topicId',
  path: '/forum/topics/$topicId',
  getParentRoute: () => rootRouteImport,
} as any)
const ForumPostsPostIdRoute = ForumPostsPostIdRouteImport.update({
  id: '/forum/posts/$postId',
  path: '/forum/posts/$postId',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartServerFuncsRoute = DemoStartServerFuncsRouteImport.update({
  id: '/demo/start/server-funcs',
  path: '/demo/start/server-funcs',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoStartApiRequestRoute = DemoStartApiRequestRouteImport.update({
  id: '/demo/start/api-request',
  path: '/demo/start/api-request',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormSimpleRoute = DemoFormSimpleRouteImport.update({
  id: '/demo/form/simple',
  path: '/demo/form/simple',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoFormAddressRoute = DemoFormAddressRouteImport.update({
  id: '/demo/form/address',
  path: '/demo/form/address',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardInstructorUploadIndexRoute =
  DashboardInstructorUploadIndexRouteImport.update({
    id: '/dashboard/instructor/upload/',
    path: '/dashboard/instructor/upload/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorStudentsIndexRoute =
  DashboardInstructorStudentsIndexRouteImport.update({
    id: '/dashboard/instructor/students/',
    path: '/dashboard/instructor/students/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorMessagesIndexRoute =
  DashboardInstructorMessagesIndexRouteImport.update({
    id: '/dashboard/instructor/messages/',
    path: '/dashboard/instructor/messages/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorCoursesIndexRoute =
  DashboardInstructorCoursesIndexRouteImport.update({
    id: '/dashboard/instructor/courses/',
    path: '/dashboard/instructor/courses/',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorAnalyticsIndexRoute =
  DashboardInstructorAnalyticsIndexRouteImport.update({
    id: '/dashboard/instructor/analytics/',
    path: '/dashboard/instructor/analytics/',
    getParentRoute: () => rootRouteImport,
  } as any)
const MeCourseCourseIdProgressRoute =
  MeCourseCourseIdProgressRouteImport.update({
    id: '/me/course/$courseId/progress',
    path: '/me/course/$courseId/progress',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorCoursesNewRoute =
  DashboardInstructorCoursesNewRouteImport.update({
    id: '/dashboard/instructor/courses/new',
    path: '/dashboard/instructor/courses/new',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorCoursesCourseIdLecturesRoute =
  DashboardInstructorCoursesCourseIdLecturesRouteImport.update({
    id: '/dashboard/instructor/courses/$courseId/lectures',
    path: '/dashboard/instructor/courses/$courseId/lectures',
    getParentRoute: () => rootRouteImport,
  } as any)
const DashboardInstructorCoursesCourseIdEditRoute =
  DashboardInstructorCoursesCourseIdEditRouteImport.update({
    id: '/dashboard/instructor/courses/$courseId/edit',
    path: '/dashboard/instructor/courses/$courseId/edit',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/billing/methods': typeof BillingMethodsRoute
  '/billing/subscriptions': typeof BillingSubscriptionsRoute
  '/billing/transactions': typeof BillingTransactionsRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/me/courses': typeof MeCoursesRoute
  '/me/dashboard': typeof MeDashboardRoute
  '/me/enrollments': typeof MeEnrollmentsRoute
  '/chat': typeof ChatIndexRoute
  '/courses': typeof CoursesIndexRoute
  '/files': typeof FilesIndexRoute
  '/forum': typeof ForumIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/forum/posts/$postId': typeof ForumPostsPostIdRoute
  '/forum/topics/$topicId': typeof ForumTopicsTopicIdRoute
  '/learn/$courseId/$lectureId': typeof LearnCourseIdLectureIdRoute
  '/dashboard/instructor': typeof DashboardInstructorIndexRoute
  '/dashboard/instructor/courses/new': typeof DashboardInstructorCoursesNewRoute
  '/me/course/$courseId/progress': typeof MeCourseCourseIdProgressRoute
  '/dashboard/instructor/analytics': typeof DashboardInstructorAnalyticsIndexRoute
  '/dashboard/instructor/courses': typeof DashboardInstructorCoursesIndexRoute
  '/dashboard/instructor/messages': typeof DashboardInstructorMessagesIndexRoute
  '/dashboard/instructor/students': typeof DashboardInstructorStudentsIndexRoute
  '/dashboard/instructor/upload': typeof DashboardInstructorUploadIndexRoute
  '/dashboard/instructor/courses/$courseId/edit': typeof DashboardInstructorCoursesCourseIdEditRoute
  '/dashboard/instructor/courses/$courseId/lectures': typeof DashboardInstructorCoursesCourseIdLecturesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/billing/methods': typeof BillingMethodsRoute
  '/billing/subscriptions': typeof BillingSubscriptionsRoute
  '/billing/transactions': typeof BillingTransactionsRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/me/courses': typeof MeCoursesRoute
  '/me/dashboard': typeof MeDashboardRoute
  '/me/enrollments': typeof MeEnrollmentsRoute
  '/chat': typeof ChatIndexRoute
  '/courses': typeof CoursesIndexRoute
  '/files': typeof FilesIndexRoute
  '/forum': typeof ForumIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/forum/posts/$postId': typeof ForumPostsPostIdRoute
  '/forum/topics/$topicId': typeof ForumTopicsTopicIdRoute
  '/learn/$courseId/$lectureId': typeof LearnCourseIdLectureIdRoute
  '/dashboard/instructor': typeof DashboardInstructorIndexRoute
  '/dashboard/instructor/courses/new': typeof DashboardInstructorCoursesNewRoute
  '/me/course/$courseId/progress': typeof MeCourseCourseIdProgressRoute
  '/dashboard/instructor/analytics': typeof DashboardInstructorAnalyticsIndexRoute
  '/dashboard/instructor/courses': typeof DashboardInstructorCoursesIndexRoute
  '/dashboard/instructor/messages': typeof DashboardInstructorMessagesIndexRoute
  '/dashboard/instructor/students': typeof DashboardInstructorStudentsIndexRoute
  '/dashboard/instructor/upload': typeof DashboardInstructorUploadIndexRoute
  '/dashboard/instructor/courses/$courseId/edit': typeof DashboardInstructorCoursesCourseIdEditRoute
  '/dashboard/instructor/courses/$courseId/lectures': typeof DashboardInstructorCoursesCourseIdLecturesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/mcp': typeof McpRoute
  '/payment-error': typeof PaymentErrorRoute
  '/payment-success': typeof PaymentSuccessRoute
  '/api/demo-names': typeof ApiDemoNamesRoute
  '/api/demo-tq-todos': typeof ApiDemoTqTodosRoute
  '/api/mcp-todos': typeof ApiMcpTodosRoute
  '/auth/login': typeof AuthLoginRoute
  '/auth/register': typeof AuthRegisterRoute
  '/billing/methods': typeof BillingMethodsRoute
  '/billing/subscriptions': typeof BillingSubscriptionsRoute
  '/billing/transactions': typeof BillingTransactionsRoute
  '/courses/$courseId': typeof CoursesCourseIdRoute
  '/demo/mcp-todos': typeof DemoMcpTodosRoute
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/me/courses': typeof MeCoursesRoute
  '/me/dashboard': typeof MeDashboardRoute
  '/me/enrollments': typeof MeEnrollmentsRoute
  '/chat/': typeof ChatIndexRoute
  '/courses/': typeof CoursesIndexRoute
  '/files/': typeof FilesIndexRoute
  '/forum/': typeof ForumIndexRoute
  '/demo/form/address': typeof DemoFormAddressRoute
  '/demo/form/simple': typeof DemoFormSimpleRoute
  '/demo/start/api-request': typeof DemoStartApiRequestRoute
  '/demo/start/server-funcs': typeof DemoStartServerFuncsRoute
  '/forum/posts/$postId': typeof ForumPostsPostIdRoute
  '/forum/topics/$topicId': typeof ForumTopicsTopicIdRoute
  '/learn/$courseId/$lectureId': typeof LearnCourseIdLectureIdRoute
  '/dashboard/instructor/': typeof DashboardInstructorIndexRoute
  '/dashboard/instructor/courses/new': typeof DashboardInstructorCoursesNewRoute
  '/me/course/$courseId/progress': typeof MeCourseCourseIdProgressRoute
  '/dashboard/instructor/analytics/': typeof DashboardInstructorAnalyticsIndexRoute
  '/dashboard/instructor/courses/': typeof DashboardInstructorCoursesIndexRoute
  '/dashboard/instructor/messages/': typeof DashboardInstructorMessagesIndexRoute
  '/dashboard/instructor/students/': typeof DashboardInstructorStudentsIndexRoute
  '/dashboard/instructor/upload/': typeof DashboardInstructorUploadIndexRoute
  '/dashboard/instructor/courses/$courseId/edit': typeof DashboardInstructorCoursesCourseIdEditRoute
  '/dashboard/instructor/courses/$courseId/lectures': typeof DashboardInstructorCoursesCourseIdLecturesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/mcp'
    | '/payment-error'
    | '/payment-success'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/api/mcp-todos'
    | '/auth/login'
    | '/auth/register'
    | '/billing/methods'
    | '/billing/subscriptions'
    | '/billing/transactions'
    | '/courses/$courseId'
    | '/demo/mcp-todos'
    | '/demo/tanstack-query'
    | '/me/courses'
    | '/me/dashboard'
    | '/me/enrollments'
    | '/chat'
    | '/courses'
    | '/files'
    | '/forum'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/forum/posts/$postId'
    | '/forum/topics/$topicId'
    | '/learn/$courseId/$lectureId'
    | '/dashboard/instructor'
    | '/dashboard/instructor/courses/new'
    | '/me/course/$courseId/progress'
    | '/dashboard/instructor/analytics'
    | '/dashboard/instructor/courses'
    | '/dashboard/instructor/messages'
    | '/dashboard/instructor/students'
    | '/dashboard/instructor/upload'
    | '/dashboard/instructor/courses/$courseId/edit'
    | '/dashboard/instructor/courses/$courseId/lectures'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/mcp'
    | '/payment-error'
    | '/payment-success'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/api/mcp-todos'
    | '/auth/login'
    | '/auth/register'
    | '/billing/methods'
    | '/billing/subscriptions'
    | '/billing/transactions'
    | '/courses/$courseId'
    | '/demo/mcp-todos'
    | '/demo/tanstack-query'
    | '/me/courses'
    | '/me/dashboard'
    | '/me/enrollments'
    | '/chat'
    | '/courses'
    | '/files'
    | '/forum'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/forum/posts/$postId'
    | '/forum/topics/$topicId'
    | '/learn/$courseId/$lectureId'
    | '/dashboard/instructor'
    | '/dashboard/instructor/courses/new'
    | '/me/course/$courseId/progress'
    | '/dashboard/instructor/analytics'
    | '/dashboard/instructor/courses'
    | '/dashboard/instructor/messages'
    | '/dashboard/instructor/students'
    | '/dashboard/instructor/upload'
    | '/dashboard/instructor/courses/$courseId/edit'
    | '/dashboard/instructor/courses/$courseId/lectures'
  id:
    | '__root__'
    | '/'
    | '/mcp'
    | '/payment-error'
    | '/payment-success'
    | '/api/demo-names'
    | '/api/demo-tq-todos'
    | '/api/mcp-todos'
    | '/auth/login'
    | '/auth/register'
    | '/billing/methods'
    | '/billing/subscriptions'
    | '/billing/transactions'
    | '/courses/$courseId'
    | '/demo/mcp-todos'
    | '/demo/tanstack-query'
    | '/me/courses'
    | '/me/dashboard'
    | '/me/enrollments'
    | '/chat/'
    | '/courses/'
    | '/files/'
    | '/forum/'
    | '/demo/form/address'
    | '/demo/form/simple'
    | '/demo/start/api-request'
    | '/demo/start/server-funcs'
    | '/forum/posts/$postId'
    | '/forum/topics/$topicId'
    | '/learn/$courseId/$lectureId'
    | '/dashboard/instructor/'
    | '/dashboard/instructor/courses/new'
    | '/me/course/$courseId/progress'
    | '/dashboard/instructor/analytics/'
    | '/dashboard/instructor/courses/'
    | '/dashboard/instructor/messages/'
    | '/dashboard/instructor/students/'
    | '/dashboard/instructor/upload/'
    | '/dashboard/instructor/courses/$courseId/edit'
    | '/dashboard/instructor/courses/$courseId/lectures'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  McpRoute: typeof McpRoute
  PaymentErrorRoute: typeof PaymentErrorRoute
  PaymentSuccessRoute: typeof PaymentSuccessRoute
  ApiDemoNamesRoute: typeof ApiDemoNamesRoute
  ApiDemoTqTodosRoute: typeof ApiDemoTqTodosRoute
  ApiMcpTodosRoute: typeof ApiMcpTodosRoute
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
  BillingMethodsRoute: typeof BillingMethodsRoute
  BillingSubscriptionsRoute: typeof BillingSubscriptionsRoute
  BillingTransactionsRoute: typeof BillingTransactionsRoute
  CoursesCourseIdRoute: typeof CoursesCourseIdRoute
  DemoMcpTodosRoute: typeof DemoMcpTodosRoute
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
  MeCoursesRoute: typeof MeCoursesRoute
  MeDashboardRoute: typeof MeDashboardRoute
  MeEnrollmentsRoute: typeof MeEnrollmentsRoute
  ChatIndexRoute: typeof ChatIndexRoute
  CoursesIndexRoute: typeof CoursesIndexRoute
  FilesIndexRoute: typeof FilesIndexRoute
  ForumIndexRoute: typeof ForumIndexRoute
  DemoFormAddressRoute: typeof DemoFormAddressRoute
  DemoFormSimpleRoute: typeof DemoFormSimpleRoute
  DemoStartApiRequestRoute: typeof DemoStartApiRequestRoute
  DemoStartServerFuncsRoute: typeof DemoStartServerFuncsRoute
  ForumPostsPostIdRoute: typeof ForumPostsPostIdRoute
  ForumTopicsTopicIdRoute: typeof ForumTopicsTopicIdRoute
  LearnCourseIdLectureIdRoute: typeof LearnCourseIdLectureIdRoute
  DashboardInstructorIndexRoute: typeof DashboardInstructorIndexRoute
  DashboardInstructorCoursesNewRoute: typeof DashboardInstructorCoursesNewRoute
  MeCourseCourseIdProgressRoute: typeof MeCourseCourseIdProgressRoute
  DashboardInstructorAnalyticsIndexRoute: typeof DashboardInstructorAnalyticsIndexRoute
  DashboardInstructorCoursesIndexRoute: typeof DashboardInstructorCoursesIndexRoute
  DashboardInstructorMessagesIndexRoute: typeof DashboardInstructorMessagesIndexRoute
  DashboardInstructorStudentsIndexRoute: typeof DashboardInstructorStudentsIndexRoute
  DashboardInstructorUploadIndexRoute: typeof DashboardInstructorUploadIndexRoute
  DashboardInstructorCoursesCourseIdEditRoute: typeof DashboardInstructorCoursesCourseIdEditRoute
  DashboardInstructorCoursesCourseIdLecturesRoute: typeof DashboardInstructorCoursesCourseIdLecturesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/payment-success': {
      id: '/payment-success'
      path: '/payment-success'
      fullPath: '/payment-success'
      preLoaderRoute: typeof PaymentSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/payment-error': {
      id: '/payment-error'
      path: '/payment-error'
      fullPath: '/payment-error'
      preLoaderRoute: typeof PaymentErrorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mcp': {
      id: '/mcp'
      path: '/mcp'
      fullPath: '/mcp'
      preLoaderRoute: typeof McpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forum/': {
      id: '/forum/'
      path: '/forum'
      fullPath: '/forum'
      preLoaderRoute: typeof ForumIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files/': {
      id: '/files/'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/': {
      id: '/courses/'
      path: '/courses'
      fullPath: '/courses'
      preLoaderRoute: typeof CoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/chat/': {
      id: '/chat/'
      path: '/chat'
      fullPath: '/chat'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/enrollments': {
      id: '/me/enrollments'
      path: '/me/enrollments'
      fullPath: '/me/enrollments'
      preLoaderRoute: typeof MeEnrollmentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/dashboard': {
      id: '/me/dashboard'
      path: '/me/dashboard'
      fullPath: '/me/dashboard'
      preLoaderRoute: typeof MeDashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/courses': {
      id: '/me/courses'
      path: '/me/courses'
      fullPath: '/me/courses'
      preLoaderRoute: typeof MeCoursesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/mcp-todos': {
      id: '/demo/mcp-todos'
      path: '/demo/mcp-todos'
      fullPath: '/demo/mcp-todos'
      preLoaderRoute: typeof DemoMcpTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/courses/$courseId': {
      id: '/courses/$courseId'
      path: '/courses/$courseId'
      fullPath: '/courses/$courseId'
      preLoaderRoute: typeof CoursesCourseIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing/transactions': {
      id: '/billing/transactions'
      path: '/billing/transactions'
      fullPath: '/billing/transactions'
      preLoaderRoute: typeof BillingTransactionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing/subscriptions': {
      id: '/billing/subscriptions'
      path: '/billing/subscriptions'
      fullPath: '/billing/subscriptions'
      preLoaderRoute: typeof BillingSubscriptionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/billing/methods': {
      id: '/billing/methods'
      path: '/billing/methods'
      fullPath: '/billing/methods'
      preLoaderRoute: typeof BillingMethodsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/register': {
      id: '/auth/register'
      path: '/auth/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth/login': {
      id: '/auth/login'
      path: '/auth/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/mcp-todos': {
      id: '/api/mcp-todos'
      path: '/api/mcp-todos'
      fullPath: '/api/mcp-todos'
      preLoaderRoute: typeof ApiMcpTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-tq-todos': {
      id: '/api/demo-tq-todos'
      path: '/api/demo-tq-todos'
      fullPath: '/api/demo-tq-todos'
      preLoaderRoute: typeof ApiDemoTqTodosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/demo-names': {
      id: '/api/demo-names'
      path: '/api/demo-names'
      fullPath: '/api/demo-names'
      preLoaderRoute: typeof ApiDemoNamesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/': {
      id: '/dashboard/instructor/'
      path: '/dashboard/instructor'
      fullPath: '/dashboard/instructor'
      preLoaderRoute: typeof DashboardInstructorIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/learn/$courseId/$lectureId': {
      id: '/learn/$courseId/$lectureId'
      path: '/learn/$courseId/$lectureId'
      fullPath: '/learn/$courseId/$lectureId'
      preLoaderRoute: typeof LearnCourseIdLectureIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forum/topics/$topicId': {
      id: '/forum/topics/$topicId'
      path: '/forum/topics/$topicId'
      fullPath: '/forum/topics/$topicId'
      preLoaderRoute: typeof ForumTopicsTopicIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/forum/posts/$postId': {
      id: '/forum/posts/$postId'
      path: '/forum/posts/$postId'
      fullPath: '/forum/posts/$postId'
      preLoaderRoute: typeof ForumPostsPostIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/server-funcs': {
      id: '/demo/start/server-funcs'
      path: '/demo/start/server-funcs'
      fullPath: '/demo/start/server-funcs'
      preLoaderRoute: typeof DemoStartServerFuncsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/start/api-request': {
      id: '/demo/start/api-request'
      path: '/demo/start/api-request'
      fullPath: '/demo/start/api-request'
      preLoaderRoute: typeof DemoStartApiRequestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/simple': {
      id: '/demo/form/simple'
      path: '/demo/form/simple'
      fullPath: '/demo/form/simple'
      preLoaderRoute: typeof DemoFormSimpleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/form/address': {
      id: '/demo/form/address'
      path: '/demo/form/address'
      fullPath: '/demo/form/address'
      preLoaderRoute: typeof DemoFormAddressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/upload/': {
      id: '/dashboard/instructor/upload/'
      path: '/dashboard/instructor/upload'
      fullPath: '/dashboard/instructor/upload'
      preLoaderRoute: typeof DashboardInstructorUploadIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/students/': {
      id: '/dashboard/instructor/students/'
      path: '/dashboard/instructor/students'
      fullPath: '/dashboard/instructor/students'
      preLoaderRoute: typeof DashboardInstructorStudentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/messages/': {
      id: '/dashboard/instructor/messages/'
      path: '/dashboard/instructor/messages'
      fullPath: '/dashboard/instructor/messages'
      preLoaderRoute: typeof DashboardInstructorMessagesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/courses/': {
      id: '/dashboard/instructor/courses/'
      path: '/dashboard/instructor/courses'
      fullPath: '/dashboard/instructor/courses'
      preLoaderRoute: typeof DashboardInstructorCoursesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/analytics/': {
      id: '/dashboard/instructor/analytics/'
      path: '/dashboard/instructor/analytics'
      fullPath: '/dashboard/instructor/analytics'
      preLoaderRoute: typeof DashboardInstructorAnalyticsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/me/course/$courseId/progress': {
      id: '/me/course/$courseId/progress'
      path: '/me/course/$courseId/progress'
      fullPath: '/me/course/$courseId/progress'
      preLoaderRoute: typeof MeCourseCourseIdProgressRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/courses/new': {
      id: '/dashboard/instructor/courses/new'
      path: '/dashboard/instructor/courses/new'
      fullPath: '/dashboard/instructor/courses/new'
      preLoaderRoute: typeof DashboardInstructorCoursesNewRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/courses/$courseId/lectures': {
      id: '/dashboard/instructor/courses/$courseId/lectures'
      path: '/dashboard/instructor/courses/$courseId/lectures'
      fullPath: '/dashboard/instructor/courses/$courseId/lectures'
      preLoaderRoute: typeof DashboardInstructorCoursesCourseIdLecturesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard/instructor/courses/$courseId/edit': {
      id: '/dashboard/instructor/courses/$courseId/edit'
      path: '/dashboard/instructor/courses/$courseId/edit'
      fullPath: '/dashboard/instructor/courses/$courseId/edit'
      preLoaderRoute: typeof DashboardInstructorCoursesCourseIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  McpRoute: McpRoute,
  PaymentErrorRoute: PaymentErrorRoute,
  PaymentSuccessRoute: PaymentSuccessRoute,
  ApiDemoNamesRoute: ApiDemoNamesRoute,
  ApiDemoTqTodosRoute: ApiDemoTqTodosRoute,
  ApiMcpTodosRoute: ApiMcpTodosRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
  BillingMethodsRoute: BillingMethodsRoute,
  BillingSubscriptionsRoute: BillingSubscriptionsRoute,
  BillingTransactionsRoute: BillingTransactionsRoute,
  CoursesCourseIdRoute: CoursesCourseIdRoute,
  DemoMcpTodosRoute: DemoMcpTodosRoute,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
  MeCoursesRoute: MeCoursesRoute,
  MeDashboardRoute: MeDashboardRoute,
  MeEnrollmentsRoute: MeEnrollmentsRoute,
  ChatIndexRoute: ChatIndexRoute,
  CoursesIndexRoute: CoursesIndexRoute,
  FilesIndexRoute: FilesIndexRoute,
  ForumIndexRoute: ForumIndexRoute,
  DemoFormAddressRoute: DemoFormAddressRoute,
  DemoFormSimpleRoute: DemoFormSimpleRoute,
  DemoStartApiRequestRoute: DemoStartApiRequestRoute,
  DemoStartServerFuncsRoute: DemoStartServerFuncsRoute,
  ForumPostsPostIdRoute: ForumPostsPostIdRoute,
  ForumTopicsTopicIdRoute: ForumTopicsTopicIdRoute,
  LearnCourseIdLectureIdRoute: LearnCourseIdLectureIdRoute,
  DashboardInstructorIndexRoute: DashboardInstructorIndexRoute,
  DashboardInstructorCoursesNewRoute: DashboardInstructorCoursesNewRoute,
  MeCourseCourseIdProgressRoute: MeCourseCourseIdProgressRoute,
  DashboardInstructorAnalyticsIndexRoute:
    DashboardInstructorAnalyticsIndexRoute,
  DashboardInstructorCoursesIndexRoute: DashboardInstructorCoursesIndexRoute,
  DashboardInstructorMessagesIndexRoute: DashboardInstructorMessagesIndexRoute,
  DashboardInstructorStudentsIndexRoute: DashboardInstructorStudentsIndexRoute,
  DashboardInstructorUploadIndexRoute: DashboardInstructorUploadIndexRoute,
  DashboardInstructorCoursesCourseIdEditRoute:
    DashboardInstructorCoursesCourseIdEditRoute,
  DashboardInstructorCoursesCourseIdLecturesRoute:
    DashboardInstructorCoursesCourseIdLecturesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
