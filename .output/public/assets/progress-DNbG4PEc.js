import{r as u,j as l,g as I,P as f,b as y}from"./main-amE6mPDm.js";var d="Progress",v=100,[E,C]=I(d),[R,j]=E(d),m=u.forwardRef((e,r)=>{const{__scopeProgress:n,value:o=null,max:a,getValueLabel:b=w,...h}=e;(a||a===0)&&!p(a)&&console.error(_(`${a}`,"Progress"));const t=p(a)?a:v;o!==null&&!c(o,t)&&console.error(M(`${o}`,"Progress"));const s=c(o,t)?o:null,$=i(s)?b(s,t):void 0;return l.jsx(R,{scope:n,value:s,max:t,children:l.jsx(f.div,{"aria-valuemax":t,"aria-valuemin":0,"aria-valuenow":i(s)?s:void 0,"aria-valuetext":$,role:"progressbar","data-state":P(s,t),"data-value":s??void 0,"data-max":t,...h,ref:r})})});m.displayName=d;var g="ProgressIndicator",x=u.forwardRef((e,r)=>{const{__scopeProgress:n,...o}=e,a=j(g,n);return l.jsx(f.div,{"data-state":P(a.value,a.max),"data-value":a.value??void 0,"data-max":a.max,...o,ref:r})});x.displayName=g;function w(e,r){return`${Math.round(e/r*100)}%`}function P(e,r){return e==null?"indeterminate":e===r?"complete":"loading"}function i(e){return typeof e=="number"}function p(e){return i(e)&&!isNaN(e)&&e>0}function c(e,r){return i(e)&&!isNaN(e)&&e<=r&&e>=0}function _(e,r){return`Invalid prop \`max\` of value \`${e}\` supplied to \`${r}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${v}\`.`}function M(e,r){return`Invalid prop \`value\` of value \`${e}\` supplied to \`${r}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${v} if no \`max\` prop is set)
  - \`null\` or \`undefined\` if the progress is indeterminate.

Defaulting to \`null\`.`}var N=m,V=x;const A=u.forwardRef(({className:e,value:r,...n},o)=>l.jsx(N,{ref:o,className:y("relative h-2 w-full overflow-hidden rounded-full bg-muted",e),...n,children:l.jsx(V,{className:"h-full w-full flex-1 bg-primary transition-all",style:{transform:`translateX(-${100-(r||0)}%)`}})}));A.displayName=N.displayName;export{A as P};
